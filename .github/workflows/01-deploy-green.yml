name: Deploy Green Container

on:
  push:
    branches:
      - release-test

env:
  FRONT_PROD1_PORT: 3001
  FRONT_PROD2_PORT: 3002
  BACK_PROD1_PORT: 8001
  BACK_PROD2_PORT: 8002

jobs:
  check-envs:
    runs-on: ubuntu-latest
    outputs:
      front-green-port: ${{ steps.green-envs.outputs.FRONT_GREEN_PORT }}
      back-green-port: ${{ steps.green-envs.outputs.BACK_GREEN_PORT }}
      api-url: ${{ steps.green-envs.outputs.API_URL }}
    steps:
      - name: Create frontend server ssh key file
        run: |
          echo "${{ secrets.FRONT_SERVER_SSH_KEY }}" > ~/fkey.pem
          chmod 400 ~/fkey.pem
      
      - name: Check frontend blue container port
        id: green-envs
        run: | 
          FRONT_BLUE_PORT=$(ssh -i ~/fkey.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.FRONT_SERVER_HOST }} \
          "docker inspect --format='{{.HostConfig.PortBindings}}' frontend-blue | awk '{print \$2}' | awk -F '}' '{print \$1}'")

          echo "Current frontend blue container port: $FRONT_BLUE_PORT"

          if [ "$FRONT_BLUE_PORT" = "${{ env.FRONT_PROD1_PORT }}" ]; then
            echo "FRONT_GREEN_PORT=${{ env.FRONT_PROD2_PORT }}" >> $GITHUB_OUTPUT
            echo "BACK_GREEN_PORT=${{ env.BACK_PROD2_PORT }}" >> $GITHUB_OUTPUT
            echo "API_URL=${{ secrets.API_PROD2_URL }}" >> $GITHUB_OUTPUT
          else
            echo "FRONT_GREEN_PORT=${{ env.FRONT_PROD1_PORT }}" >> $GITHUB_OUTPUT
            echo "BACK_GREEN_PORT=${{ env.BACK_PROD1_PORT }}" >> $GITHUB_OUTPUT
            echo "API_URL=${{ secrets.API_PROD1_URL }}" >> $GITHUB_OUTPUT
          fi

  deploy-frontend-green:
    runs-on: ubuntu-latest
    needs: check-envs
    env:
      API_URL: ${{ needs.check-envs.outputs.api-url }}
      DOCKER_IMAGE: rimember/ringchat-frontend-prod:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build frontend docker image
        run: docker build --build-arg NEXT_PUBLIC_API_URL=$API_URL -t $DOCKER_IMAGE ./frontend

      - name: Push frontend docker image
        run: docker push $DOCKER_IMAGE

      - name: Deploy frontend green container on EC2
        uses: appleboy/ssh-action@v1.1.0
        env:
          HOST_PORT: ${{ needs.check-envs.outputs.front-green-port }}
          DOCKER_IMAGE: $DOCKER_IMAGE
          DOCKER_CONTAINER: frontend-green
        with:
          key: ${{ secrets.FRONT_SERVER_SSH_KEY }}
          host: ${{ secrets.FRONT_SERVER_HOST }}
          username: ubuntu
          envs: HOST_PORT, DOCKER_IMAGE, DOCKER_CONTAINER
          script: |
            docker stop $DOCKER_CONTAINER || true
            docker rm $DOCKER_CONTAINER || true
            docker run -d --name $DOCKER_CONTAINER -p $HOST_PORT:3000 $DOCKER_IMAGE

  deploy-backend-green:
    runs-on: ubuntu-latest
    needs: check-envs
    env:
      DOCKER_IMAGE: rimember/ringchat-backend-prod:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build backend docker image
        run: docker build -t $DOCKER_IMAGE ./backend

      - name: Push backend docker image
        run: docker push $DOCKER_IMAGE

      - name: Deploy backend green container on EC2
        uses: appleboy/ssh-action@v1.1.0
        env:
          HOST_PORT: ${{ needs.check-envs.outputs.back-green-port }}
          DOCKER_IMAGE: $DOCKER_IMAGE
          DOCKER_CONTAINER: backend-green
        with:
          key: ${{ secrets.BACK_SERVER_SSH_KEY }}
          host: ${{ secrets.BACK_SERVER_HOST }}
          username: ubuntu
          envs: HOST_PORT, DOCKER_IMAGE, DOCKER_CONTAINER
          script: |
            docker stop $DOCKER_CONTAINER || true
            docker rm $DOCKER_CONTAINER || true
            docker run -d --name $DOCKER_CONTAINER -p $HOST_PORT:8000 \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY}} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY}} \
              $DOCKER_IMAGE
