name: Release CD Frontend

on:
  push:
    branches:
      - release-test
    paths:
      - 'frontend/**'

env:
  DOCKER_IMAGE_NAME: rimember/ringchat-frontend-prod:latest
  DOCKER_CONTAINER_NAME: frontend-prod
  PORT_PROD1: 3001
  PORT_PROD2: 3002

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      - name: Determine new port
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.FRONT_SERVER_SSH_KEY }}
          host: ${{ secrets.FRONT_SERVER_HOST }}
          username: ubuntu
          script: |
            if docker ps | grep -q 0.0.0.0:${{ env.PORT_PROD1 }}; then
              echo "NEW_PORT=${{ env.PORT_PROD2 }}" >> "$GITHUB_ENV"
              echo "NEW_CONTAINER=${{ env.DOCKER_CONTAINER_NAME }}2" >> "$GITHUB_ENV"
            else
              echo "NEW_PORT=${{ env.PORT_PROD1 }}" >> "$GITHUB_ENV"
              echo "NEW_CONTAINER=${{ env.DOCKER_CONTAINER_NAME }}1" >> "$GITHUB_ENV"
            fi
        continue-on-error: false

      - name: Build Docker image
        run: |
          docker build --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            -t ${{ env.DOCKER_IMAGE_NAME }} ./frontend

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ env.DOCKER_IMAGE_NAME }}

      - name: Deploy Green container on remote server
        uses: appleboy/ssh-action@v1.1.0
        with:
          key: ${{ secrets.FRONT_SERVER_SSH_KEY }}
          host: ${{ secrets.FRONT_SERVER_HOST }}
          username: ubuntu
          script: |
            docker stop $NEW_CONTAINER || true
            docker rm $NEW_CONTAINER || true
            docker pull ${{ env.DOCKER_IMAGE_NAME }}
            docker run -d --name $NEW_CONTAINER -p $NEW_PORT:3000 ${{ env.DOCKER_IMAGE_NAME }}
